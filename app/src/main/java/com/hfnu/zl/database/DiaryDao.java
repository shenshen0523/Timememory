package com.hfnu.zl.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY".
*/
public class DiaryDao extends AbstractDao<Diary, Long> {

    public static final String TABLENAME = "DIARY";

    /**
     * Properties of entity Diary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PassWord = new Property(1, String.class, "passWord", false, "PASS_WORD");
        public final static Property DiaryType = new Property(2, String.class, "diaryType", false, "DIARY_TYPE");
        public final static Property Picture = new Property(3, String.class, "picture", false, "PICTURE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Record = new Property(5, String.class, "record", false, "RECORD");
        public final static Property Mood = new Property(6, String.class, "mood", false, "MOOD");
        public final static Property WriteTime = new Property(7, java.util.Date.class, "writeTime", false, "WRITE_TIME");
    }


    public DiaryDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PASS_WORD\" TEXT," + // 1: passWord
                "\"DIARY_TYPE\" TEXT," + // 2: diaryType
                "\"PICTURE\" TEXT," + // 3: picture
                "\"CONTENT\" TEXT," + // 4: content
                "\"RECORD\" TEXT," + // 5: record
                "\"MOOD\" TEXT," + // 6: mood
                "\"WRITE_TIME\" INTEGER);"); // 7: writeTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Diary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(2, passWord);
        }
 
        String diaryType = entity.getDiaryType();
        if (diaryType != null) {
            stmt.bindString(3, diaryType);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(6, record);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(7, mood);
        }
 
        java.util.Date writeTime = entity.getWriteTime();
        if (writeTime != null) {
            stmt.bindLong(8, writeTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Diary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(2, passWord);
        }
 
        String diaryType = entity.getDiaryType();
        if (diaryType != null) {
            stmt.bindString(3, diaryType);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(6, record);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(7, mood);
        }
 
        java.util.Date writeTime = entity.getWriteTime();
        if (writeTime != null) {
            stmt.bindLong(8, writeTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Diary readEntity(Cursor cursor, int offset) {
        Diary entity = new Diary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // passWord
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // diaryType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picture
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // record
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mood
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // writeTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Diary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPassWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiaryType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicture(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecord(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMood(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWriteTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Diary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Diary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Diary entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
