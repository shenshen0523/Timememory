package com.hfnu.zl.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE".
*/
public class ScheduleDao extends AbstractDao<Schedule, Long> {

    public static final String TABLENAME = "SCHEDULE";

    /**
     * Properties of entity Schedule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScheduleName = new Property(1, String.class, "scheduleName", false, "SCHEDULE_NAME");
        public final static Property WriteTime = new Property(2, java.util.Date.class, "writeTime", false, "WRITE_TIME");
        public final static Property DetailContent = new Property(3, String.class, "detailContent", false, "DETAIL_CONTENT");
        public final static Property Mood = new Property(4, String.class, "mood", false, "MOOD");
    }


    public ScheduleDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SCHEDULE_NAME\" TEXT," + // 1: scheduleName
                "\"WRITE_TIME\" INTEGER," + // 2: writeTime
                "\"DETAIL_CONTENT\" TEXT," + // 3: detailContent
                "\"MOOD\" TEXT);"); // 4: mood
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scheduleName = entity.getScheduleName();
        if (scheduleName != null) {
            stmt.bindString(2, scheduleName);
        }
 
        java.util.Date writeTime = entity.getWriteTime();
        if (writeTime != null) {
            stmt.bindLong(3, writeTime.getTime());
        }
 
        String detailContent = entity.getDetailContent();
        if (detailContent != null) {
            stmt.bindString(4, detailContent);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(5, mood);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scheduleName = entity.getScheduleName();
        if (scheduleName != null) {
            stmt.bindString(2, scheduleName);
        }
 
        java.util.Date writeTime = entity.getWriteTime();
        if (writeTime != null) {
            stmt.bindLong(3, writeTime.getTime());
        }
 
        String detailContent = entity.getDetailContent();
        if (detailContent != null) {
            stmt.bindString(4, detailContent);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(5, mood);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Schedule readEntity(Cursor cursor, int offset) {
        Schedule entity = new Schedule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scheduleName
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // writeTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // detailContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // mood
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Schedule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScheduleName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWriteTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDetailContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMood(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Schedule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Schedule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Schedule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
